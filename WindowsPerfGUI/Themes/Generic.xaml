<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:WindowsPerfGUI.Components"
    xmlns:tree="clr-namespace:WindowsPerfGUI.Components.TreeListView">

    <SolidColorBrush x:Key="CustomTheme.Colors.DarkGray" Color="#565656" />
    <SolidColorBrush x:Key="CustomTheme.Colors.DarkestGray" Color="#414141" />
    <CornerRadius
        x:Key="TextBox.Border.CornerRadius"
        BottomLeft="2"
        BottomRight="2"
        TopLeft="2"
        TopRight="2" />
    <SolidColorBrush x:Key="CustomTheme.Colors.Gray" Color="#FF838383" />
    <SolidColorBrush x:Key="CustomTheme.Colors.White" Color="White" />
    <SolidColorBrush x:Key="CustomTheme.Colors.Transparent" Color="Transparent" />
    <SolidColorBrush x:Key="CustomTheme.Colors.LightGray" Color="#C1C1C1" />
    <SolidColorBrush x:Key="CustomTheme.Colors.OffWhite" Color="#FFF3F9FF" />
    <SolidColorBrush x:Key="CustomTheme.Colors.Accent" Color="#FF3C77DD" />

    <Style BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type local:CustomTextBoxControl}">
        <Setter Property="Foreground" Value="{StaticResource CustomTheme.Colors.White}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="Background" Value="{StaticResource CustomTheme.Colors.DarkestGray}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomTextBoxControl}">
                    <ControlTemplate.Resources>
                        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                    </ControlTemplate.Resources>
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{StaticResource CustomTheme.Colors.DarkGray}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{StaticResource TextBox.Border.CornerRadius}">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost" />
                            <TextBox
                                Height="Auto"
                                Padding="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Background="{StaticResource CustomTheme.Colors.DarkestGray}"
                                BorderThickness="0"
                                Foreground="{StaticResource CustomTheme.Colors.OffWhite}"
                                IsHitTestVisible="False"
                                Opacity="0.5"
                                Text="{TemplateBinding Placeholder}"
                                TextWrapping="Wrap"
                                Visibility="{TemplateBinding IsEmpty,
                                                             Converter={StaticResource BooleanToVisibilityConverter}}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type local:CustomMonikerButtonControl}">
        <Setter Property="Background" Value="{StaticResource CustomTheme.Colors.Transparent}" />
        <Setter Property="Foreground" Value="{StaticResource CustomTheme.Colors.White}" />
        <Setter Property="BorderBrush" Value="{StaticResource CustomTheme.Colors.White}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomMonikerButtonControl}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="0"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource CustomTheme.Colors.Transparent}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource CustomTheme.Colors.Transparent}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource CustomTheme.Colors.Gray}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource CustomTheme.Colors.White}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource CustomTheme.Colors.DarkestGray}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource CustomTheme.Colors.White}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type local:CustomButtonControl}">
        <Setter Property="Background" Value="{StaticResource CustomTheme.Colors.Transparent}" />
        <Setter Property="Foreground" Value="{StaticResource CustomTheme.Colors.White}" />
        <Setter Property="BorderBrush" Value="{StaticResource CustomTheme.Colors.White}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomButtonControl}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="15"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource CustomTheme.Colors.Gray}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource CustomTheme.Colors.White}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource CustomTheme.Colors.DarkestGray}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource CustomTheme.Colors.White}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxToggleButtonTemplate" TargetType="ToggleButton">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
                Name="Border"
                Grid.ColumnSpan="2"
                Background="{StaticResource CustomTheme.Colors.DarkestGray}"
                BorderBrush="{StaticResource CustomTheme.Colors.DarkGray}"
                BorderThickness="1,1,1,1"
                CornerRadius="{StaticResource TextBox.Border.CornerRadius}" />
            <Border
                Name="ButtonBorder"
                Grid.Column="1"
                Margin="1,1,1,1"
                Background="{StaticResource CustomTheme.Colors.Transparent}"
                BorderBrush="{StaticResource CustomTheme.Colors.DarkGray}"
                BorderThickness="0,0,0,0"
                CornerRadius="{StaticResource TextBox.Border.CornerRadius}" />

            <Path
                Name="Arrow"
                Grid.Column="1"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                Fill="{StaticResource CustomTheme.Colors.White}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter TargetName="ButtonBorder" Property="Panel.Background" Value="{StaticResource CustomTheme.Colors.Gray}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter TargetName="ButtonBorder" Property="Panel.Background" Value="{StaticResource CustomTheme.Colors.White}" />
                <Setter TargetName="Arrow" Property="Shape.Fill" Value="{StaticResource CustomTheme.Colors.Gray}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="{x:Type local:CustomComboBoxControl}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="TextElement.Foreground" Value="{StaticResource CustomTheme.Colors.White}" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton
                            Name="ToggleButton"
                            Grid.Column="2"
                            ClickMode="Press"
                            Focusable="False"
                            IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                            Template="{StaticResource ComboBoxToggleButtonTemplate}" />

                        <ContentPresenter
                            Name="ContentSite"
                            Margin="5,3,23,3"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            IsHitTestVisible="False" />
                        <TextBox
                            Name="PART_EditableTextBox"
                            Margin="3,3,23,3"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Background="{StaticResource CustomTheme.Colors.DarkestGray}"
                            Focusable="True"
                            IsReadOnly="{TemplateBinding IsReadOnly}"
                            Visibility="Hidden">
                            <TextBox.Template>
                                <ControlTemplate TargetType="TextBox">
                                    <Border Name="PART_ContentHost" Focusable="False" />
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>
                        <!--  Popup showing items  -->
                        <Popup
                            Name="Popup"
                            Focusable="True"
                            IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                            Placement="Bottom"
                            PopupAnimation="Slide">
                            <Grid
                                Name="DropDown"
                                MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                SnapsToDevicePixels="True">
                                <Border
                                    Name="DropDownBorder"
                                    Margin="0,1,0,0"
                                    Background="{StaticResource CustomTheme.Colors.Transparent}"
                                    BorderBrush="{StaticResource CustomTheme.Colors.DarkGray}"
                                    BorderThickness="1,1,1,1"
                                    CornerRadius="0" />
                                <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Type RadioButton}}" TargetType="{x:Type local:CustomRadioButtonControl}">
        <Setter Property="Background" Value="{StaticResource CustomTheme.Colors.Transparent}" />
        <Setter Property="BorderBrush" Value="{StaticResource CustomTheme.Colors.LightGray}" />
        <Setter Property="Foreground" Value="{StaticResource CustomTheme.Colors.White}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid
                        x:Name="templateRoot"
                        Background="{StaticResource CustomTheme.Colors.Transparent}"
                        SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border
                            x:Name="radioButtonBorder"
                            Margin="1,1,2,1"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="100">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse
                                    x:Name="optionMark"
                                    MinWidth="6"
                                    MinHeight="6"
                                    Fill="{StaticResource CustomTheme.Colors.LightGray}"
                                    Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="radioButtonBorder" Property="Background" Value="{StaticResource CustomTheme.Colors.OffWhite}" />
                            <Setter TargetName="radioButtonBorder" Property="BorderBrush" Value="{StaticResource CustomTheme.Colors.White}" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource CustomTheme.Colors.LightGray}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="radioButtonBorder" Property="Background" Value="{StaticResource CustomTheme.Colors.OffWhite}" />
                            <Setter TargetName="radioButtonBorder" Property="BorderBrush" Value="{StaticResource CustomTheme.Colors.Accent}" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource CustomTheme.Colors.White}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="optionMark" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="optionMark" Property="Opacity" Value="0.56" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Width" Value="19" />
        <Setter Property="Height" Value="13" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border
                        Width="19"
                        Height="13"
                        Background="{StaticResource CustomTheme.Colors.Transparent}">
                        <Border
                            Width="9"
                            Height="9"
                            Background="Transparent"
                            BorderBrush="{StaticResource CustomTheme.Colors.Transparent}"
                            BorderThickness="1,1,1,1"
                            CornerRadius="1,1,1,1"
                            SnapsToDevicePixels="True">
                            <Path
                                Name="ExpandPath"
                                Margin="1,1,1,1"
                                Data="M0,2L0,3 2,3 2,5 3,5 3,3 5,3 5,2 3,2 3,0 2,0 2,2z"
                                Fill="{StaticResource CustomTheme.Colors.White}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="ExpandPath" Property="Path.Data">
                                <Setter.Value>
                                    <StreamGeometry>M0,2L0,3 5,3 5,2z</StreamGeometry>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <tree:LevelToIndentConverter x:Key="LevelToIndentConverter" />
    <tree:CanExpandConverter x:Key="CanExpandConverter" />

    <Style TargetType="{x:Type tree:RowExpander}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type tree:RowExpander}">
                    <ToggleButton
                        x:Name="Expander"
                        Margin="{Binding Node.Level, Converter={StaticResource LevelToIndentConverter}, RelativeSource={RelativeSource AncestorType={x:Type tree:TreeListItem}}}"
                        ClickMode="Press"
                        IsChecked="{Binding Node.IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type tree:TreeListItem}}}"
                        Style="{StaticResource ExpandCollapseToggleStyle}"
                        Visibility="{Binding Node.IsExpandable, Converter={StaticResource CanExpandConverter}, RelativeSource={RelativeSource AncestorType={x:Type tree:TreeListItem}}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



</ResourceDictionary>
