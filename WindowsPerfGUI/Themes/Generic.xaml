<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:WindowsPerfGUI.Components"
                    xmlns:tree="clr-namespace:WindowsPerfGUI.Components.TreeListView">
    <CornerRadius x:Key="TextBox.Border.CornerRadius"
                  BottomLeft="2"
                  BottomRight="2"
                  TopLeft="2"
                  TopRight="2" />
    <!--  https://vscolor.sboulema.nl/  -->
    <SolidColorBrush x:Key="VsTransparentColor"
                     Color="Transparent" />
    <SolidColorBrush x:Key="VsToolWindowText"
                     Color="{DynamicResource VsColor.ToolWindowText}" />
    <SolidColorBrush x:Key="VsInputBackground"
                     Color="{DynamicResource VsColor.ComboBoxBackground}" />
    <SolidColorBrush x:Key="VsInputBorder"
                     Color="{DynamicResource VsColor.ComboBoxFocusedBorder}" />
    <SolidColorBrush x:Key="VsCommandBarHover"
                     Color="{DynamicResource VsColor.CommandBarHover}" />
    <SolidColorBrush x:Key="VsCommandBarSelectedBorder"
                     Color="{DynamicResource VsColor.CommandBarSelectedBorder}" />
    <SolidColorBrush x:Key="VsWindowText"
                     Color="{DynamicResource VsColor.WindowText}" />
    <SolidColorBrush x:Key="VsBrandedUIBorder"
                     Color="{DynamicResource VsColor.BrandedUIBorder}" />
    <SolidColorBrush x:Key="VsButtonPressedBackground"
                     Color="{DynamicResource VsColor.StartPageButtonPinDown}" />
    <SolidColorBrush x:Key="VsDisabledForeground"
                     Color="{DynamicResource VsColor.ComboBoxDisabledText}" />
    <SolidColorBrush x:Key="VsDisabledBackground"
                     Color="{DynamicResource VsColor.ComboBoxDisabledBackground}" />
    <Style BasedOn="{StaticResource {x:Type TextBox}}"
           TargetType="{x:Type local:CustomTextBoxControl}">
        <Setter Property="Foreground"
                Value="{StaticResource VsToolWindowText}" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="Background"
                Value="{StaticResource VsInputBackground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomTextBoxControl}">
                    <ControlTemplate.Resources>
                        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                    </ControlTemplate.Resources>
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{StaticResource VsBrandedUIBorder}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="1">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost" />
                            <TextBox Height="Auto"
                                     Padding="{TemplateBinding Padding}"
                                     HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                     Background="{StaticResource VsInputBackground}"
                                     BorderThickness="0"
                                     Foreground="{StaticResource VsToolWindowText}"
                                     IsHitTestVisible="False"
                                     Opacity="0.5"
                                     Text="{TemplateBinding Placeholder}"
                                     TextWrapping="Wrap"
                                     Visibility="{TemplateBinding IsEmpty,
                                                             Converter={StaticResource BooleanToVisibilityConverter}}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource {x:Type Button}}"
           TargetType="{x:Type local:CustomMonikerButtonControl}">
        <Setter Property="Background"
                Value="{StaticResource VsTransparentColor}" />
        <Setter Property="Foreground"
                Value="{StaticResource VsWindowText}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource VsWindowText}" />
        <Setter Property="Cursor"
                Value="Hand" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomMonikerButtonControl}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Focusable="False"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="False">
                            <Setter TargetName="border"
                                    Property="Background"
                                    Value="{StaticResource VsTransparentColor}" />
                            <Setter TargetName="border"
                                    Property="BorderBrush"
                                    Value="{StaticResource VsTransparentColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="border"
                                    Property="Background"
                                    Value="{StaticResource VsCommandBarHover}" />
                            <Setter TargetName="border"
                                    Property="BorderBrush"
                                    Value="{StaticResource VsToolWindowText}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter TargetName="border"
                                    Property="Background"
                                    Value="{StaticResource VsButtonPressedBackground}" />
                            <Setter TargetName="border"
                                    Property="BorderBrush"
                                    Value="{StaticResource VsToolWindowText}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource {x:Type Button}}"
           TargetType="{x:Type local:CustomButtonControl}">
        <Setter Property="Background"
                Value="{StaticResource VsInputBackground}" />
        <Setter Property="Foreground"
                Value="{StaticResource VsToolWindowText}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource VsBrandedUIBorder}" />
        <Setter Property="Cursor"
                Value="Hand" />
        <Setter Property="Padding"
                Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomButtonControl}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="1"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Focusable="False"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted"
                                 Value="true">
                            <Setter TargetName="border"
                                    Property="BorderBrush"
                                    Value="{StaticResource VsBrandedUIBorder}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="border"
                                    Property="Background"
                                    Value="{StaticResource VsCommandBarHover}" />
                            <Setter TargetName="border"
                                    Property="BorderBrush"
                                    Value="{StaticResource VsCommandBarSelectedBorder}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter TargetName="border"
                                    Property="Background"
                                    Value="{StaticResource VsButtonPressedBackground}" />
                            <Setter TargetName="border"
                                    Property="BorderBrush"
                                    Value="{StaticResource VsBrandedUIBorder}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Opacity"
                                    Value=".5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxToggleButtonTemplate"
                     TargetType="ToggleButton">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border Name="Border"
                    Grid.ColumnSpan="2"
                    Background="{StaticResource VsInputBackground}"
                    BorderBrush="{StaticResource VsBrandedUIBorder}"
                    BorderThickness="1,1,1,1"
                    CornerRadius="{StaticResource TextBox.Border.CornerRadius}" />
            <Border Name="ButtonBorder"
                    Grid.Column="1"
                    Margin="1,1,1,1"
                    Background="{StaticResource VsTransparentColor}"
                    BorderBrush="{StaticResource VsWindowText}"
                    BorderThickness="0,0,0,0"
                    CornerRadius="{StaticResource TextBox.Border.CornerRadius}" />
            <Path Name="Arrow"
                  Grid.Column="1"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                  Fill="{StaticResource VsToolWindowText}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver"
                     Value="True">
                <Setter TargetName="ButtonBorder"
                        Property="Panel.Background"
                        Value="{StaticResource VsCommandBarHover}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked"
                     Value="True">
                <Setter TargetName="ButtonBorder"
                        Property="Panel.Background"
                        Value="{StaticResource VsToolWindowText}" />
                <Setter TargetName="Arrow"
                        Property="Shape.Fill"
                        Value="{StaticResource VsCommandBarHover}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style BasedOn="{StaticResource {x:Type ComboBox}}"
           TargetType="{x:Type local:CustomComboBoxControl}">
        <Setter Property="UIElement.SnapsToDevicePixels"
                Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll"
                Value="True" />
        <Setter Property="TextElement.Foreground"
                Value="{StaticResource VsToolWindowText}" />
        <Setter Property="TextElement.Background"
                Value="{StaticResource VsInputBackground}" />
        <Setter Property="FrameworkElement.FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton"
                                      Grid.Column="2"
                                      Background="{StaticResource VsInputBackground}"
                                      ClickMode="Press"
                                      Focusable="False"
                                      IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                      Template="{StaticResource ComboBoxToggleButtonTemplate}" />
                        <ContentPresenter Name="ContentSite"
                                          Margin="5,3,23,3"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          IsHitTestVisible="False" />
                        <TextBox Name="PART_EditableTextBox"
                                 Margin="3,3,23,3"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center"
                                 Background="{StaticResource VsInputBackground}"
                                 Focusable="True"
                                 IsReadOnly="{TemplateBinding IsReadOnly}"
                                 Visibility="Hidden">
                            <TextBox.Template>
                                <ControlTemplate TargetType="TextBox">
                                    <Border Name="PART_ContentHost"
                                            Background="{DynamicResource VsInputBackground}"
                                            Focusable="False" />
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>
                        <!--  Popup showing items  -->
                        <Popup Name="Popup"
                               Focusable="True"
                               IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                               Placement="Bottom"
                               PopupAnimation="Slide">
                            <Grid Name="DropDown"
                                  MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                  MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                  SnapsToDevicePixels="True">
                                <Border Name="DropDownBorder"
                                        Margin="0,1,0,0"
                                        Background="{StaticResource VsInputBackground}"
                                        BorderBrush="{StaticResource VsBrandedUIBorder}"
                                        BorderThickness="1,1,1,1"
                                        CornerRadius="0" />
                                <ScrollViewer Margin="4"
                                              SnapsToDevicePixels="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource {x:Type RadioButton}}"
           TargetType="{x:Type local:CustomRadioButtonControl}">
        <Setter Property="Background"
                Value="{StaticResource VsTransparentColor}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource VsBrandedUIBorder}" />
        <Setter Property="Foreground"
                Value="{StaticResource VsToolWindowText}" />
        <Setter Property="BorderThickness"
                Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot"
                          VerticalAlignment="Center"
                          Background="{StaticResource VsTransparentColor}"
                          SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder"
                                Margin="1,1,2,1"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="100">
                            <Grid x:Name="markGrid"
                                  Margin="2">
                                <Ellipse x:Name="optionMark"
                                         MinWidth="6"
                                         MinHeight="6"
                                         Fill="{StaticResource VsBrandedUIBorder}"
                                         Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter"
                                          Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Focusable="False"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent"
                                 Value="true">
                            <Setter Property="Padding"
                                    Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="radioButtonBorder"
                                    Property="Background"
                                    Value="{StaticResource VsBrandedUIBorder}" />
                            <Setter TargetName="radioButtonBorder"
                                    Property="BorderBrush"
                                    Value="{StaticResource VsToolWindowText}" />
                            <Setter TargetName="optionMark"
                                    Property="Fill"
                                    Value="{StaticResource VsBrandedUIBorder}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter TargetName="radioButtonBorder"
                                    Property="Background"
                                    Value="{StaticResource VsBrandedUIBorder}" />
                            <Setter TargetName="radioButtonBorder"
                                    Property="BorderBrush"
                                    Value="{StaticResource VsBrandedUIBorder}" />
                            <Setter TargetName="optionMark"
                                    Property="Fill"
                                    Value="{StaticResource VsBrandedUIBorder}" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter TargetName="optionMark"
                                    Property="Opacity"
                                    Value="1" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                                 Value="{x:Null}">
                            <Setter TargetName="optionMark"
                                    Property="Opacity"
                                    Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpandCollapseToggleStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Width"
                Value="19" />
        <Setter Property="Height"
                Value="13" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Width="19"
                            Height="13"
                            Background="{StaticResource VsTransparentColor}">
                        <Border Width="9"
                                Height="9"
                                Background="Transparent"
                                BorderBrush="{StaticResource VsTransparentColor}"
                                BorderThickness="1,1,1,1"
                                CornerRadius="1,1,1,1"
                                SnapsToDevicePixels="True">
                            <Path Name="ExpandPath"
                                  Margin="1,1,1,1"
                                  Data="M0,2L0,3 2,3 2,5 3,5 3,3 5,3 5,2 3,2 3,0 2,0 2,2z"
                                  Fill="{StaticResource VsToolWindowText}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked"
                                 Value="True">
                            <Setter TargetName="ExpandPath"
                                    Property="Path.Data">
                                <Setter.Value>
                                    <StreamGeometry>M0,2L0,3 5,3 5,2z</StreamGeometry>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <tree:LevelToIndentConverter x:Key="LevelToIndentConverter" />
    <tree:CanExpandConverter x:Key="CanExpandConverter" />
    <Style TargetType="{x:Type tree:RowExpander}">
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type tree:RowExpander}">
                    <ToggleButton x:Name="Expander"
                                  Margin="{Binding Node.Level, Converter={StaticResource LevelToIndentConverter}, RelativeSource={RelativeSource AncestorType={x:Type tree:TreeListItem}}}"
                                  ClickMode="Press"
                                  IsChecked="{Binding Node.IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type tree:TreeListItem}}}"
                                  Style="{StaticResource ExpandCollapseToggleStyle}"
                                  Visibility="{Binding Node.IsExpandable, Converter={StaticResource CanExpandConverter}, RelativeSource={RelativeSource AncestorType={x:Type tree:TreeListItem}}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
